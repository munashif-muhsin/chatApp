// Generated by CoffeeScript 1.11.1
(function() {
  var MongoStore, RedisStore, Store, mongo, redis,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports.version = '0.1.2';

  mongo = require('mongodb');

  redis = require('redis');

  Store = (function() {
    Store.init = function(config) {
      switch (config.type) {
        case "mongodb":
          return new MongoStore(config);
        case "redis":
          return new RedisStore(config);
        default:
          throw new Error('Invalid Storage Type');
      }
    };

    function Store(config1) {
      this.config = config1;
    }

    Store.prototype.connect = function(next) {
      throw new Error('must override');
    };

    Store.prototype.insert = function(room, event, data) {
      throw new Error('must override');
    };

    Store.prototype.listen = function(next) {
      throw new Error('must override');
    };

    return Store;

  })();

  MongoStore = (function(superClass) {
    extend(MongoStore, superClass);

    function MongoStore() {
      return MongoStore.__super__.constructor.apply(this, arguments);
    }

    MongoStore.prototype.connect = function(next) {
      var base, base1, base2, db, server;
      if (this.collection) {
        return next();
      }
      if ((base = this.config).collection == null) {
        base.collection = 'events';
      }
      if ((base1 = this.config).host == null) {
        base1.host = 'localhost';
      }
      if ((base2 = this.config).port == null) {
        base2.port = 27017;
      }
      server = new mongo.Server(this.config.host, this.config.port, {
        auto_reconnect: true
      });
      db = new mongo.Db(this.config.database, server);
      return db.open((function(_this) {
        return function(err, client) {
          if (err) {
            throw err;
          }
          if (_this.config.username && _this.config.password) {
            client.authenticate(_this.config.username, _this.config.password, function(err) {
              if (err) {
                throw err;
              }
              _this.collection = new mongo.Collection(client, _this.config.collection);
              return next();
            });
          } else {

          }
          _this.collection = new mongo.Collection(client, _this.config.collection);
          return next();
        };
      })(this));
    };

    MongoStore.prototype.insert = function(room, event, data) {
      return this.connect((function(_this) {
        return function() {
          return _this.collection.insert({
            room: room,
            event: event,
            data: data
          }, function(err) {
            if (err) {
              throw err;
            }
          });
        };
      })(this));
    };

    MongoStore.prototype.listen = function(next) {
      return this.connect((function(_this) {
        return function() {
          var cursor, stream;
          cursor = _this.collection.find({}, {
            tailable: true
          });
          stream = cursor.stream();
          return stream.on('data', function(doc) {
            return next(doc.room, doc.event, doc.data);
          });
        };
      })(this));
    };

    return MongoStore;

  })(Store);

  RedisStore = (function(superClass) {
    extend(RedisStore, superClass);

    function RedisStore() {
      return RedisStore.__super__.constructor.apply(this, arguments);
    }

    RedisStore.prototype.connect = function(next) {
      var base, base1, base2;
      if (this.client) {
        return next();
      }
      if ((base = this.config).channel == null) {
        base.channel = 'pubsub';
      }
      if ((base1 = this.config).host == null) {
        base1.host = 'localhost';
      }
      if ((base2 = this.config).port == null) {
        base2.port = 6379;
      }
      this.client = redis.createClient(this.config.port, this.config.host);
      if (this.config.password) {
        return this.client.auth(this.config.password, next);
      } else {
        return next();
      }
    };

    RedisStore.prototype.insert = function(room, event, doc) {
      return this.connect((function(_this) {
        return function() {
          var data;
          data = {
            room: room,
            event: event,
            doc: doc
          };
          return _this.client.publish(_this.config.channel, JSON.stringify(data));
        };
      })(this));
    };

    RedisStore.prototype.listen = function(next) {
      return this.connect((function(_this) {
        return function() {
          _this.client.subscribe(_this.config.channel);
          return _this.client.on('message', function(channel, data) {
            data = JSON.parse(data);
            return next(data.room, data.event, data.doc);
          });
        };
      })(this));
    };

    return RedisStore;

  })(Store);

  exports.middleware = function(config) {
    var store;
    store = Store.init(config);
    return function(req, res, next) {
      req.publish = function(room, event, data) {
        return store.insert(room, event, data);
      };
      return next();
    };
  };

  exports.listen = function(sockets, config) {
    var store;
    store = Store.init(config);
    return store.listen(function(room, event, data) {
      return sockets["in"](room).emit(event, data);
    });
  };

}).call(this);
